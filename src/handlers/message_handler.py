from aiogram import types
from aiogram.fsm.context import FSMContext
from src.services.gemini import generate_gemini_response
from src.utils.text_formatter import prepare_message_for_telegram
import logging
import re

logger = logging.getLogger(__name__)


def format_response(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç, –æ–±–æ—Ä–∞—á–∏–≤–∞—è –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤ HTML-—Ç–µ–≥–∏ code."""
    # –ò—â–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞, –æ–±—Ä–∞–º–ª–µ–Ω–Ω—ã–µ ``` –∏–ª–∏ `
    code_blocks_pattern = r"```[\s\S]*?```|`[\s\S]*?`"

    def replace_code_block(match):
        code = match.group(0)
        # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–º–ª—è—é—â–∏–µ ``` –∏–ª–∏ `
        code = code.strip("`")
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ HTML-—Ç–µ–≥ code
        return f"\n<code>{code}</code>\n"

    # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
    formatted_text = re.sub(code_blocks_pattern, replace_code_block, text)
    return formatted_text


async def handle_message(message: types.Message, state: FSMContext):
    if message.text.startswith("/clear"):
        await state.set_data({"history": []})
        await message.answer("‚ú® <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!</b>")
        return

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_data()
    logger.debug(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏: –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:"
    history = current_state.get("history", [])
    user_message = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}"
    history.append(user_message)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context_text = "\n".join(history)
    logger.debug(f"–§–æ—Ä–º–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è API: {context_text}")

    try:
        response = await generate_gemini_response(context_text)
        bot_message = f"ü§ñ –ë–æ—Ç: {response}"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∞
        formatted_response = prepare_message_for_telegram(response)
        formatted_message = f"<b>ü§ñ –û—Ç–≤–µ—Ç:</b>\n\n{formatted_response}"
        await message.answer(formatted_message, parse_mode="HTML")

        # –í –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        history.append(bot_message)
        await state.update_data(history=history)

        logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é: {bot_message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        await message.answer(
            "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
